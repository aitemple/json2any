// convert json to golang class
function convertJsonToGo(jsonContent: string): string {
    const jsonObject = JSON.parse(jsonContent);
    const structs = new Map<string, string>();
    generateGoStruct(jsonObject, "AutoGenerated", structs);

    // 将所有结构体定义拼接在一起
    let result = "";
    structs.forEach(structDef => {
        result += structDef + "\n";
    });

    return result;
}

function generateGoStruct(jsonObject: any, structName: string, structs: Map<string, string>): void {
    const entries = Object.entries(jsonObject);

    const goStructFields = entries.map(([key, value]) => {
        let goType = 'interface{}';

        if (typeof value === 'string') {
            goType = 'string';
        } else if (typeof value === 'number') {
            goType = value % 1 === 0 ? 'int' : 'float64';
        } else if (typeof value === 'boolean') {
            goType = 'bool';
        } else if (Array.isArray(value)) {
            if (value.length > 0 && typeof value[0] === 'object') {
                const nestedStructName = toCamelCaseAndCapitalize(key);
                generateGoStruct(value[0], nestedStructName, structs);
                goType = `[]${nestedStructName}`;
            } else {
                goType = '[]interface{}';
            }
        } else if (typeof value === 'object' && value !== null) {
            const nestedStructName = toCamelCaseAndCapitalize(key);
            generateGoStruct(value, nestedStructName, structs);
            goType = nestedStructName;
        }

        return `${toCamelCaseAndCapitalize(key)} ${goType} \`json:"${key}"\``;
    }).join('\n\t');

    const structDef = `type ${structName} struct {\n\t${goStructFields}\n}`;
    structs.set(structName, structDef);
}

function toCamelCaseAndCapitalize(string: string): string {
    return string.split('_').map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()).join('');
}

export default convertJsonToGo;